import java.util.*;

class Solution {
    static final int MONTH_DAY = 28;
    static final int YEAR_MONTH = 12;
    static Map<String, Integer> termMap = new HashMap<>();
    
    public int[] solution(String today, String[] terms, String[] privacies) {
        List<Integer> answer = new LinkedList<>();

        final int todayValue = convertDateToInt(today);
            
        for (String term : terms) {
            String[] termAndDuration = term.split(" ");
            termMap.put(termAndDuration[0], Integer.parseInt(termAndDuration[1]));
        }
        
        for (int i = 0; i < privacies.length; i++) {
            String privacy = privacies[i];
            String[] dateAndTerm = privacy.split(" ");
            int startDay = convertDateToInt(dateAndTerm[0]);
            String term = dateAndTerm[1];
            if (isExpired(term, todayValue, startDay)) {
                answer.add(i+1);
            }
        }
        
        
        return answer.stream().mapToInt(Integer::intValue).toArray();
    }
    
    static int convertDateToInt(String date) {
        String[] dateArr = date.split("\\.");
        int dateValue = Integer.parseInt(dateArr[2]);
        dateValue += (Integer.parseInt(dateArr[1]) - 1) * MONTH_DAY;
        dateValue += (Integer.parseInt(dateArr[0]) - 2000) * MONTH_DAY * YEAR_MONTH;
        
        return dateValue;
    }
    
    static boolean isExpired(String term, int today, int startDay) {
        Integer durationMonth = termMap.get(term);
    

        return (today - startDay) >= (durationMonth * MONTH_DAY);
    }
}