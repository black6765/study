class Solution {
    public int solution(int k, int m, int[] score) {
        int answer = 0;
        
        int[] usableApple = new int[k + 1];
        
        // usableApple: 점수가 인덱스의 번호인 사과의 개수를 저장하는 배열
        // ex) usable[2] == 3이라면, 점수가 2점인 사과가 3개 있다는 것이다 
        for (int i : score) {
            usableApple[i]++;
        }
        
        int min = 10;
        int boxCnt = 0;
        
        while (k > 0) {
            // k는 사과의 최대 점수이므로, 항상 가장 높은 점수 부터 계산하기 때문에 최대 이익이 된다
            if (usableApple[k] != 0) {
                // 사용할 수 있는 score를 1개 제거하고, 박스에 채워진 개수를 1 더한다
                usableApple[k]--;
                boxCnt++;
                
                // 이익을 더할 떄는 항상 박스의 가장 작은 값을 사용한다
                min = Math.min(min, k);
                
                // 박스가 채워지면 이익을 더한다
                if (boxCnt == m) {
                    answer += m * min;
                    boxCnt = 0;
                }
                
                continue;
            } 
            
            // 
            k--;
        }

        return answer;
    }
}