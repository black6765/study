import java.util.*;

class Solution {
    public int solution(int n, int[][] computers) {
        
        // DFS 풀이
        
        int answer = 0;
        
        boolean[] visited = new boolean[n];
        
        for (int i = 0; i < n; i++) {
            visited[i] = false;
        }
        
        // Deque 자료구조를 스택으로 사용
        // addFirst()와 removeFirst()로 스택처럼 운용됨
        Deque<Integer> deq = new ArrayDeque<>();
        
        for (int i = 0; i < n; i++) {
            // while문 안에서 visited[cur] 조건을 통과하게 되면 answer을 1 증가
            boolean flag = false;
            
            // 첫번쨰로 방문할 노드를 추가
            deq.addFirst(i);
            while (!deq.isEmpty()) {
                // 방문할 노드를 꺼내서 방문했는지 확인
                int cur = deq.removeFirst();
                if (visited[cur]) {
                    continue;
                }
                
                visited[cur] = true;
                flag = true;
                
                // DFS를 숫자가 낮은 순서대로 진행시키기 위해 j를 감소시키며 역으로 진행
                // 예를 들어, 1번 노드와 2, 3, 4 노드가 모두 연결되어 있다고 한다면
                // 스택에 4 -> 3 -> 2 순서로 넣어야 2 -> 3 -> 4 순서로 순회를 진행하게 됨
                for (int j = n - 1; j >= 0; j--) {
                    // 자기 자신이라면 넘어감
                    if (i == j) {
                        continue;
                    }
                    
                    // 방문하지 않았고, 현재 노드와 연결되어 있는 노드라면 덱(스택)에 추가함
                    if (!visited[j] && computers[cur][j] == 1) {
                        deq.addFirst(j);
                    }
                }
                
            }
            
            // 방문하지 않은 노드에 방문했다면 answer이 증가
            if (flag) {
                answer++;
            }
        }
        
        
        return answer;
    }
}
