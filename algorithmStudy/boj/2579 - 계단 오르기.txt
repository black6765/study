import java.io.*;

public class Main {
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        String input = br.readLine();
        int N = Integer.parseInt(input);

        int[][] d = new int[N + 1][3];
        int[] score = new int[N + 1];

        for (int i = 1; i <= N; i++) {
            int k = Integer.parseInt(br.readLine());
            score[i] = k;
        }

        d[1][0] = 0;
        d[1][1] = score[1];
        d[1][2] = 0;

//        System.out.println(d[1][0] + " " + d[1][1] + " " + d[1][2]);
        for (int i = 2; i <= N; i++) {
            if (i == N) {
                // 마지막 계단을 밟아야 한다. 따라서 이전의 연속 2계단을 밟은 상태는 마지막 점수가 되지 못한다.
                d[i][0] = d[i - 1][1];
            } else {
                // 계단은 앞으로 한칸 또는 두칸만 허용되므로, 이전에 오르지 않았다면 이번엔 반드시 올라야 한다.
                // 이 때문에 d[i - 1][0] 값과 비교하는 연산이 제거되어야 한다.
                d[i][0] = Math.max(d[i - 1][1], d[i - 1][2]);
            }
            d[i][1] = d[i - 1][0] + score[i];
            d[i][2] = d[i - 1][1] + score[i];
//            System.out.println(d[i][0] + " " + d[i][1] + " " + d[i][2]);
        }

        bw.write(String.valueOf(Math.max(d[N][0], Math.max(d[N][1], d[N][2]))));
        bw.flush();
        bw.close();
    }

}