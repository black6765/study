import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;

class Main {
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        String[] nm = br.readLine().split(" ");
        final int N = Integer.parseInt(nm[0]);
        final int M = Integer.parseInt(nm[1]);

        // map에서 0으로 된 위치를 이동 불가 공간으로 간주한다.
        // 즉, map에서 지나간 좌표를 0으로 변경함으로써 visited 배열의 역할까지 겸한다.
        int[][] map = new int[N][M];

        for (int i = 0; i < N; i++) {
            String[] input = br.readLine().split(" ");

            for (int j = 0; j < M; j++) {
                map[i][j] = Integer.parseInt(input[j]);
            }
        }

        final int[] dRow = {1, 0, -1, 0};
        final int[] dCol = {0, 1, 0, -1};

        int cnt = 0;
        int best = 0;

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (map[i][j] == 0) continue;

                cnt++;
                int space = 1;
                Deque<int[]> queue = new ArrayDeque<>();

                int[] coord = {i, j};
                queue.addLast(coord);
                map[i][j] = 0;

                while (!queue.isEmpty()) {
                    int[] cur = queue.removeFirst();
                    for (int k = 0; k < dRow.length; k++) {
                        int nRow = cur[0] + dRow[k];
                        int nCol = cur[1] + dCol[k];

                        if (nRow < 0 || nRow >= N || nCol < 0 || nCol >= M) continue;
                        if (map[nRow][nCol] == 0) continue;

                        space++;
                        queue.addLast(new int[]{nRow, nCol});
                        map[nRow][nCol] = 0;
                    }
                }


                if (space > best) best = space;

            }
        }

        System.out.println(cnt);
        System.out.println(best);
    }
}