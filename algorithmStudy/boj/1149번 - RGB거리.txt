import java.io.*;

public class Main {
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        String input = br.readLine();
        int N = Integer.parseInt(input);

        int[][] d = new int[N + 1][3];
        int[][] score = new int[N + 1][3];

        for (int i = 1; i <= N; i++) {
            String[] tokens = br.readLine().split(" ");
            score[i][0] = Integer.parseInt(tokens[0]);
            score[i][1] = Integer.parseInt(tokens[1]);
            score[i][2] = Integer.parseInt(tokens[2]);
        }

        d[1][0] = score[1][0];
        d[1][1] = score[1][1];
        d[1][2] = score[1][2];
        d[2][0] = Math.min(d[1][1], d[1][2]) + score[2][0];
        d[2][1] = Math.min(d[1][0], d[1][2]) + score[2][1];
        d[2][2] = Math.min(d[1][0], d[1][1]) + score[2][2];


//        System.out.println(d[1][0] + " " + d[1][1] + " " + d[1][2]);
//        System.out.println(d[2][0] + " " + d[2][1] + " " + d[2][2]);
        for (int i = 3; i <= N; i++) {
            d[i][0] =  Math.min(d[i - 1][1], d[i - 1][2]) + score[i][0];
            d[i][1] =  Math.min(d[i - 1][0], d[i - 1][2]) + score[i][1];
            d[i][2] =  Math.min(d[i - 1][0], d[i - 1][1]) + score[i][2];
//            System.out.println(d[i][0] + " " + d[i][1] + " " + d[i][2]);
        }

//        for (int i = 3; i <= N; i++) {
//            d[i][0] = Math.min(
//                    Math.min(d[i - 1][1] + d[i - 2][0], d[i - 1][1] + d[i - 2][2]),
//                    Math.min(d[i - 1][2] + d[i - 2][0], d[i - 1][2] + d[i - 2][1])
//            )  + score[i][0];
//
//            d[i][1] = Math.min(
//                    Math.min(d[i - 1][0] + d[i - 2][1], d[i - 1][0] + d[i - 2][2]),
//                    Math.min(d[i - 1][2] + d[i - 2][0], d[i - 1][2] + d[i - 2][1])
//            )  + score[i][1];
//
//            d[i][2] = Math.min(
//                    Math.min(d[i - 1][0] + d[i - 2][1], d[i - 1][0] + d[i - 2][2]),
//                    Math.min(d[i - 1][1] + d[i - 2][0], d[i - 1][1] + d[i - 2][2])
//            )  + score[i][2];
//            System.out.println(d[i][0] + " " + d[i][1] + " " + d[i][2]);
//        }

        bw.write(String.valueOf(Math.min(d[N][0], Math.min(d[N][1], d[N][2]))));
        bw.flush();
        bw.close();
    }

}