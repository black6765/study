import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Queue;

class Main {
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        String[] nm = br.readLine().split(" ");
        final int N = Integer.parseInt(nm[0]);
        final int M = Integer.parseInt(nm[1]);

        int[][] map = new int[N+1][M+1];

        for (int i = 1; i <= N; i++) {
            String row = br.readLine();
            for (int j = 1; j <= M; j++) {
                map[i][j] = Integer.parseInt(String.valueOf(row.charAt(j-1)));
            }
        }

        int[] dRow = {1, 0, -1, 0};
        int[] dCol = {0, 1, 0, -1};

        Deque<int[]> queue = new ArrayDeque<>();
        boolean[][] visited = new boolean[N+1][M+1];

        queue.addLast(new int[]{1, 1, 0});
        visited[1][1] = true;

        int answer = 0;
        while (!queue.isEmpty()) {
            int[] cur = queue.removeFirst();
            cur[2] += 1;

            if (cur[0] == N && cur[1] == M) {
                answer = cur[2];
                break;
            }

            for (int i = 0; i < dRow.length; i++) {
                int nRow = cur[0] + dRow[i];
                int nCol = cur[1] + dCol[i];

                if (nRow < 0 || nRow > N || nCol < 0 || nCol > M) continue;
                if (visited[nRow][nCol] || map[nRow][nCol] == 0) continue;

                queue.addLast(new int[]{nRow, nCol, cur[2]});
                visited[nRow][nCol] = true;
            }
        }

        System.out.println(answer);
    }
}