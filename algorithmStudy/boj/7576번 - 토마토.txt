import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Deque;
import java.util.Queue;

class Main {
    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        String[] nm = br.readLine().split(" ");
        final int M = Integer.parseInt(nm[0]);
        final int N = Integer.parseInt(nm[1]);

        int[][] map = new int[N][M];

        for (int i = 0; i < N; i++) {
            String[] row = br.readLine().split(" ");
            for (int j = 0; j < M; j++) {
                map[i][j] = Integer.parseInt(row[j]);
            }
        }

//        for (int[] row : map) {
//            for (int e : row) {
//                System.out.print(e);
//            }
//            System.out.println();
//        }

        int[] dRow = {1, 0, -1, 0};
        int[] dCol = {0, 1, 0, -1};

        Deque<int[]> queue = new ArrayDeque<>();

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (map[i][j] == 1) {
                    queue.addLast(new int[]{i, j});
                }
            }
        }

        int[][] dist = new int[N][M];

        int answer = 0;
        int distMax = 0;
        while (!queue.isEmpty()) {
            int[] cur = queue.removeFirst();

            for (int i = 0; i < dRow.length; i++) {
                int nRow = cur[0] + dRow[i];
                int nCol = cur[1] + dCol[i];

                if (nRow < 0 || nRow >= N || nCol < 0 || nCol >= M) continue;
                if (map[nRow][nCol] == 1 || map[nRow][nCol] == -1) continue;

                queue.addLast(new int[]{nRow, nCol});
                map[nRow][nCol] = 1;
                dist[nRow][nCol] = dist[cur[0]][cur[1]] + 1;
                if (dist[nRow][nCol] > distMax) distMax = dist[nRow][nCol];
            }
        }

        for (int[] row : map) {
            if (answer == -1) break;
            for (int e : row) {
                if (e == 0) {
                    answer = -1;
                    break;
                }
            }
        }

        if (answer != -1) {
            answer = distMax;
        }

        System.out.println(answer);
    }
}